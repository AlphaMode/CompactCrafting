buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }

    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5.1.+"
    }
}

plugins {
    id "idea"
    id "eclipse"
    id "maven-publish"
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: "net.minecraftforge.gradle"

def gitCommitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()
def isRelease = (System.getenv("CM_RELEASE") ?: "false").equalsIgnoreCase("true")

version = isRelease ? mod_version : "${mod_version}+${gitCommitHash}"
group = isRelease ? "dev.compactmods" : "dev.compactmods.nightly"
archivesBaseName = mod_id

println("Mod ID: ${mod_id}");
println("Version: ${version}");

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    library
    implementation.extendsFrom library
    shade.extendsFrom library
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }

        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
            srcDir 'src/generated/resources'
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
    }

//    test {
//        compileClasspath += sourceSets.api.output
//        compileClasspath += sourceSets.main.output
//        runtimeClasspath += sourceSets.api.output
//        runtimeClasspath += sourceSets.main.output
//
//        resources {
//            srcDir "src/test/resources"
//        }
//    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    def resourcesDir = sourceSets.main.resources.srcDirs.first().absolutePath
    accessTransformer = file("$resourcesDir/META-INF/accesstransformer.cfg")

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // ''SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', '' // 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'compactcrafting'
            args '--all'
            args '--output', file('src/generated/resources/')
            args "--existing", file("src/main/resources")

            mods {
                compactcrafting {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

//        unitTests {
//            parent runs.server
//
//            workingDirectory project.file('run/test')
//            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
//            // The main class which launches a customized server which then runs JUnit tests
//            ideaModule "${project.name}.test"
//            property 'forge.logging.console.level', 'unittest'
//            environment 'MOD_MODULES', String.join(File.pathSeparator, "${mod_id}%%${project.name}.test")
//            environment 'target', 'fmltestserver'
//            environment 'targetModId', "${mod_id}"
//            environment "CC_TEST_RESOURCES", sourceSets.test.resources.srcDirs[0]
//            arg '--keepAlive'
//            forceExit = false
//            mods {
//                compactcrafting {
//                    source sourceSets.main
//                    source sourceSets.api
//                    source sourceSets.test
//                }
//            }
//        }
//
//        unitTestsCI {
//            parent runs.server
//
//            workingDirectory project.file('run/test')
//            main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
//            // The main class which launches a customized server which then runs JUnit tests
//            ideaModule "${project.name}.test"
//            property 'forge.logging.console.level', 'unittest'
//            environment 'MOD_MODULES', String.join(File.pathSeparator, "${mod_id}%%${project.name}.test")
//            environment 'target', 'fmltestserver'
//            environment 'targetModId', "${mod_id}"
//            environment "CC_TEST_RESOURCES", sourceSets.test.resources.srcDirs[0]
//            arg '--crashOnFailedTests'
//            forceExit = false
//            mods {
//                compactcrafting {
//                    source sourceSets.main
//                    source sourceSets.api
//                    source sourceSets.test
//                }
//            }
//        }
    }
}

def format(String jar_name) {
    def index = jar_name.lastIndexOf('-')
    index = jar_name.substring(0, index).lastIndexOf('-')
    def mod_version = jar_name.substring(index).replace(".jar", "")
    if (mod_version.startsWith('-')) {
        mod_version = mod_version.substring(1);
    }
    def mod_name = jar_name.substring(0, index)
    return mod_name + ":" + mod_name + ":" + mod_version
}

def dev_mods_dir = "mods"

repositories {
    flatDir {
        dirs dev_mods_dir
    }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "https://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }

    maven {
        name "MCJUnitLib - CM Github"
        url = "https://maven.pkg.github.com/CompactMods/mcjunitlib"
        content {
            includeGroup "com.github.alcatrazEscapee"
        }

        credentials {
            username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

def dev_mods = fileTree("mods").filter { it -> it.isFile() }.files.name.collect({ format(it) })

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${mcunittest_version}")

    library "io.reactivex.rxjava3:rxjava:3.1.1";

    // Deobfuscate each dev mod for runtime
    dev_mods.each { implementation fg.deobf(it) }

    runtimeOnly(fg.deobf("curse.maven:nicephore-401014:3542531"))
    runtimeOnly(fg.deobf("curse.maven:shutupexperimental-407174:3544525"))

    // JEI
    // compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    // The One Probe
    // compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    // runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.WARN
}

assemble {
    dependsOn shadowJar
}

reobf {
    shadowJar {}
}

tasks.withType(Jar).configureEach {
    destinationDir = file("$rootDir/build-out")
}

shadowJar {
    classifier ""
    from sourceSets.api.output
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    exclude "LICENSE*"
    finalizedBy 'reobfShadowJar'
    minimize()
    relocate 'io.reactivex', 'dev.compactmods.crafting.lib.reactivex'
    relocate 'org.reactivestreams', 'dev.compactmods.crafting.lib.reactivestreams'
}

jar {
    classifier "slim"

    from sourceSets.api.output
    from sourceSets.main.output

    finalizedBy('reobfJar')

    manifest {
        attributes([
                "Specification-Title"     : "compactcrafting",
                "Specification-Vendor"    : "robotgryphon",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : isRelease ? archiveVersion : "${mod_version}+${gitCommitHash}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.api.output
    classifier("api")
}

//task testJar(type: Jar) {
//    from sourceSets.api.output
//    from sourceSets.main.output
//    from sourceSets.test.output
//    classifier("tests")
//}

// Allow higher number of errors.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "9999"
    }
}

artifacts {
    archives jar, shadowJar, apiJar //, testJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar)
                artifact(shadowJar)
                artifact(apiJar)
                //artifact(testJar)
            }
        }

        nightlyMaven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar)
                artifact(shadowJar)
                artifact(apiJar)
                //artifact(testJar)
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactCrafting"
            credentials {
                username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

//test {
//    useJUnitPlatform() {
//        excludeTags "minecraft"
//    }
//}
