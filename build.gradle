plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
    id "maven-publish"
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "idea"
    id "eclipse"
}

def semver = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--match', 'v*'
            standardOutput = code
        }

        return code.toString().trim().substring(1).split('-')[0]
    }
    catch (ignored) {
        return "2.0.0";
    }
}

def buildNumber = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--match', 'v*'
            standardOutput = code
        }

        return Integer.parseInt(code.toString().trim().split('-')[1])
    }
    catch (ignored) {
        return 0;
    }
}

def nightlyVersion = "${semver}.${buildNumber}"
def isRelease = (System.getenv("CM_RELEASE") ?: "false").equalsIgnoreCase("true")

task getBuildInfo() {
    println("Mod ID: ${mod_id}")
    println("Version: ${isRelease ? semver : nightlyVersion}")
    println("Semver Version: ${semver}")
    println("Nightly Build: ${nightlyVersion}")
}

version = isRelease ? "${semver}" : nightlyVersion
group = isRelease ? "dev.compactmods" : "dev.compactmods.nightly"
archivesBaseName = mod_id

println("Mod ID: ${mod_id}");
println("Version: ${version}");

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    library
    implementation.extendsFrom library
    shade.extendsFrom library
}

loom {
    accessWidenerPath = file("src/main/resources/compactcrafting.accesswidener")
}

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }

        compileClasspath += configurations.getByName("minecraft")
    }

    main {
        java {
            srcDir "src/main/java"
        }

        resources {
            srcDir "src/main/resources"
            srcDir 'src/generated/resources'
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
    }

    test {
        java { srcDir "src/test/java" }

        resources {
            srcDir "src/test/resources"
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.main.output
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

repositories {
    mavenLocal()

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // location of the maven that hosts JEI files
    maven {
        name "Progwml Repo"
        url "https://dvs1.progwml6.com/files/maven"
    }

    // TheOneProbe
    maven {
            name 'wispforest maven'
            url "https://maven.wispforest.io"
        }
        maven { url = "https://mvn.devos.one/releases/" }
        maven { url = "https://mvn.devos.one/snapshots/" }
        maven { url = "https://jitpack.io/" }
        maven { url = "https://maven.shedaniel.me/" }
        maven { url "https://ladysnake.jfrog.io/artifactory/mods" }

    maven {
        name "MCJUnitLib - CM Github"
        url = "https://maven.pkg.github.com/CompactMods/mcjunitlib"
        content {
            includeGroup "com.github.alcatrazEscapee"
        }

        credentials {
            username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}"))
    modImplementation(include("me.alphamode:ForgeTags:${project.forge_tags_version}"))

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

    library "io.reactivex.rxjava3:rxjava:3.1.1";

    // Nicephore - Screenshots and Stuff
    modRuntimeOnly("curse.maven:nicephore-fabric-405990:3651224")

    // Shut up Experimental Settings - so we don't have to deal with that CONSTANTLY
    modRuntimeOnly("curse.maven:fabric-disable-custom-worlds-advice-401978:3677546")

    // REI
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    // The One Probe
    modImplementation("mcjty.theoneprobe:theoneprobe-fabric:${top_version}")
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

processTestResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.withType(Jar).configureEach {
    destinationDir = file("$rootDir/build-out")
}

jar {
    classifier "slim"

    from sourceSets.api.output
    from sourceSets.main.output

    finalizedBy('reobfJar')

    manifest {
        attributes([
                "Specification-Title"     : "Compact Crafting",
                "Specification-Vendor"    : "compactmods",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.api.output
    classifier("api")
}

//task testJar(type: Jar) {
//    from sourceSets.api.output
//    from sourceSets.main.output
//    from sourceSets.test.output
//    classifier("tests")
//}

// Allow higher number of errors.
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "9999"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar)
                artifact(apiJar)
                //artifact(testJar)
            }
        }

        nightlyMaven(MavenPublication) {
            artifactId = mod_id
            artifacts {
                artifact(jar)
                artifact(apiJar)
                //artifact(testJar)
            }
        }
    }

    repositories {
        // GitHub Packages
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/CompactMods/CompactCrafting"
            credentials {
                username = project.findProperty("gpr.actor") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}